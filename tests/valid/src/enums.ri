enum SimpleEnum {
    Abc,
    Def,
    Ghi
}

test "enums: enum literal" {
    mut abc := SimpleEnum.Abc;
    @assert(abc == .Abc);
    abc = .Def;
    @assert(abc == .Def);
}

test "enums: ordinal value" {
    @assert(@as(int32, SimpleEnum.Abc) == 0);
    @assert(@as(int32, SimpleEnum.Def) == 1);
    @assert(@as(int32, SimpleEnum.Ghi) == 2);
}

enum OverridedValue {
    Abc,
    Def = 10,
    Ghi
}

test "enums: overrided ordinal value" {
    @assert(@as(int32, OverridedValue.Abc) == 0);
    @assert(@as(int32, OverridedValue.Def) == 10);
    @assert(@as(int32, OverridedValue.Ghi) == 11);
}

test "enums: enum variant switch" {
    abc := SimpleEnum.Abc;
    switch abc {
        .Abc => @assert(true),
        else => @assert(false)
    }
}

enum AdvancedEnum {
    Abc: int32,
    Def,
    Ghi: rune
}

test "enums: advanced enum" {
    mut e := AdvancedEnum.Abc(6);
    if e is .Abc {
        @assert(@as(int32, e) == 6);
    }
    switch e is {
        .Abc as e_abc => @assert(e_abc == 6),
        else => @assert(false)
    }
    switch e is {
        .Abc as mut e_abc2 => @assert(e_abc2 == 6),
        else => @assert(false)
    }
    e = .Def();
    switch e is {
        .Def => @assert(true),
        else => @assert(false)
    }
}
