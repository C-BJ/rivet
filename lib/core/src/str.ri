// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

import pkg::stdc: string;

#[used]
struct _str {
    ptr: *const u8;
    pub size: usize; // bytes count
    pub len: usize; // runes count
}

extend str {
    pub unsafe fn from_cstr(cstr: *const u8) str {
        let size = unsafe { string::strlen(cstr) };
        return _str{
            ptr: cstr,
            size: size,
            len: if (size == 1) 1 else cstr_len_utf8(cstr, size)
        };
    }

    pub unsafe fn from_cstr_with_size(cstr: *const u8, size: usize) str {
        return _str{
            ptr: cstr,
            size: size,
            len: if (size == 1) 1 else cstr_len_utf8(cstr, size)
        };
    }

    pub fn is_empty(&self) bool { return self.size == 0; }

    #[used]
    fn ==(&self, rhs: &Self) bool {
        if (self.ptr == none) {
            panic("str::eq: none string");
        }
        if (self.size != rhs.size) {
            return false;
        }
        if (self.size > 0) {
            let last_idx = self.size - 1;
            if (unsafe { self.ptr[last_idx] != rhs.ptr[last_idx] }) {
                return false;
            }
        }
        return mem::cmp(self.ptr, rhs.ptr, rhs.size) == 0;
    }

    #[used]
    fn !=(&self, rhs: &Self) bool { return !self.==(rhs); }

    #[used]
    fn <(&self, rhs: &Self) bool {
        for (i in 0..self.size) {
            if (i >= rhs.size or unsafe { self.ptr[i] > rhs.ptr[i] }) {
                return false;
            } elif (unsafe { self.ptr[i] < rhs.ptr[i] }) {
                return true;
            }
        }
        if (self.size < rhs.size) {
            return true;
        }
        return false;
    }

    #[used]
    fn >(&self, rhs: &Self) bool { return !self.<(rhs); }

    #[used]
    fn <=(&self, rhs: &Self) bool { return self.<(rhs) or self.==(rhs); }

    #[used]
    fn >=(&self, rhs: &Self) bool { return self.>(rhs) or self.==(rhs); }

    #[used]
    fn slice(&self, start: usize, end: usize) str {
        if (start > end or start > self.size or end > self.size) {
            panic("string slice index out of range");
        }
        let size = end - start;
        if (size == self.size) {
            return self.*;
        }
        let ptr = unsafe { self.ptr + start };
        return _str{
            ptr: ptr,
            size: size,
            len: cstr_len_utf8(ptr, size)
        };
    }

    #[used]
    fn slice_from(&self, start: usize) str {
        return self.slice(start, self.size);
    }
}

extend str for ToString {
    fn to_string(&self) String { return String::from_str(self.*); }
}
