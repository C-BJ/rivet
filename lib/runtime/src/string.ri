// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c/libc";

let empty_string: string = string(c"", 0, true);

pub class string : ToString {
    pub ptr: *u8;
    pub len: usize;
    is_ref: bool;

    #[unsafe]
    pub fn from_raw(ptr: ?*u8, is_ref: bool = false) Self {
        if let safe_ptr = ptr {
            return unsafe {
                Self.from_raw_with_len(safe_ptr, libc.strlen(ptr), is_ref)
            };
        }
        return empty_string;
    }

    #[unsafe]
    pub fn from_raw_with_len(ptr: ?*u8, len: usize, is_ref: bool = false) Self {
        if len == 0 {
            return empty_string;
        }
        if let safe_ptr = ptr {
            return Self(safe_ptr, len, is_ref);
        }
        return empty_string;
    }

    pub fn from_byte(byte: u8) Self {
        let res = @as(*mut u8, mem_alloc(2) catch @unreachable());
        unsafe {
            res[0] = byte;
            res[1] = 0;
        }
        return Self(res, 1);
    }

    /// Returns a string with the bytes stored in `bytes`. If the length of
    /// `bytes` is 0, an empty string is returned instead.
    pub fn from_bytes(bytes: [u8]) Self {
        if bytes.len == 0 {
            return empty_string;
        }
        let res = @as(*mut u8, mem_alloc(bytes.len + 1) catch @unreachable());
        unsafe {
            mem_copy(res, @addr_of(bytes[0]), bytes.len);
            res[bytes.len] = 0;
        }
        return Self(res, bytes.len);
    }

    fn at(self, idx: usize) u8 {
        if idx >= self.len {
            process_panic("string index out of range (index: {}, len: {})", idx, self.len);
        }
        return unsafe { self.ptr[idx] };
    }

    pub fn concat(self, others: ...Self) Self {
        let mut sb = StringBuilder.from_string(self);
        for other in others {
            sb.write_string(other);
        }
        return sb.to_string();
    }

    /// Returns a string formatted with all the values passed.
    ///
    /// Each replacement position is marked with `{}`:
    ///
    /// `"x: {}".fmt(1) == "x: 1"`
    ///
    /// It is also possible to use a specific position within the replace position:
    ///
    /// `"x: {1} | {0}".fmt(1, 2) == "x: 2 | 1"`
    ///
    /// If no argument is passed, the string is returned unchanged.
    ///
    /// To escape `{` and `}`, `{{` and `}}` can be used, this does not apply if no
    /// argument is passed.
    ///
    /// If the replacement positions exceed the number of passed arguments, a process_panic
    /// occurs.
    pub fn fmt(self, args: ...ToString) Self {
        if args.len == 0 {
            return self;
        }
        let mut i: usize = 0;
        let mut args_idx: usize = 0;
        let mut res = StringBuilder.new(self.len);
        while i < self.len : i += 1 {
            let b = unsafe { self.ptr[i] };
            let b2 = if i + 1 < self.len unsafe { self.ptr[i + 1] } else { 0 };
            switch b {
                b'{' => {
                    if b2 == b'{' { // escaping '{'
                        res.write_byte(b'{');
                        i += 1;
                    } else if b2 == b'}' {
                        let arg_idx = args_idx;
                        args_idx += 1;
                        if arg_idx >= args.len {
                            process_panic(
                                "fmt: argument index out of range (argument index: {}, len: {}, index: {})",
                                arg_idx, args.len, i
                            );
                        }
                        res.write_string(args[arg_idx].to_string());
                        i += 1;
                    } else if b2.is_digit() {
                        let start = i;
                        i += 1;
                        let mut buf = StaticBuffer();
                        while unsafe { self.ptr[i] != b'}' } {
                            buf.push(unsafe { self.ptr[i] });
                            i += 1;
                            if i >= self.len {
                                process_panic("fmt: incomplete format string (index: {})", start);
                            }
                        }
                        let index = buf.as_u64();
                        if index >= args.len {
                            process_panic(
                                "fmt: argument index out of range (index: {}, len: {})",
                                index, args.len
                            );
                        }
                        res.write_string(args[index].to_string());
                    } else {
                        process_panic("fmt: expecting closing '}}' in format string (index: {})", i);
                    }
                },
                b'}' => {
                    if b2 == b'}' { // escaping '}'
                        res.write_byte(b'}');
                        i += 1;
                    } else {
                        process_panic(
                            "fmt: single '}}' encountered in format string (index: {})", i
                        );
                    }
                },
                else => res.write_byte(b)
            }
        }
        return res.to_string();
    }

    /// Returns the number of occurrences of `substr` in the string or -1 if no
    /// `substr` could be found.
    pub fn count(self, substr: string) usize {
        if self.len == 0 or substr.len == 0 {
            return 0;
        }
        if substr.len > self.len {
            return 0;
        }
        let mut n: usize = 0;
        if substr.len == 1 {
            for l in self.as_bytes() {
                if l == substr[0] {
                    n += 1;
                }
            }
            return n;
        }
        let mut i: usize = 0;
        while {
            i = self.index_after_of(substr, i) ?? return n;
            i += substr.len;
            n += 1;
        }
        return 0;
    }

    /// Returns the index of byte `b` if found in the string.
    pub fn index_of_byte(self, b: u8) ?usize {
        for i in 0..self.len {
            if unsafe { self.ptr[i] == b } {
                return i;
            }
        }
        return nil;
    }

    /// Returns the position of the first character of the input string.
    /// It will return `nil` if the input string can't be found.
    pub fn index_of(self, p: string) ?usize {
        if p.len > self.len or p.len == 0 {
            return nil;
        }
        let mut i: usize = 0;
        while i < self.len : i += 1 {
            let mut j: usize = 0;
            while j < p.len and unsafe { self.ptr[i + j] == p.ptr[j] } : j += 1 { }
            if j == p.len {
                return i;
            }
        }
        return nil;
    }

    /// Returns the position of the input string, starting search from `start` position.
    pub fn index_after_of(self, p: string, start: usize) ?usize {
        if p.len > self.len {
            return nil;
        }
        let mut strt = start;
        if start >= self.len {
            return nil;
        }
        let mut i = strt;
        while i < self.len : i += 1 {
            let mut j: usize = 0;
            let mut ii = i;
            while j < p.len and unsafe { self.ptr[ii] == p.ptr[j] } {
                j += 1;
                ii += 1;
            }
            if j == p.len {
                return i;
            }
        }
        return nil;
    }

    /// Returns the string found between `start` string and `end` string.
    pub fn find_between(self, start: string, end: string) string {
        let start_pos = self.index_of(start) ?? return empty_string;
        let val = self.slice(start_pos + start.len, self.len);
        let end_pos = val.index_of(end) ?? return val;
        return val.slice(0, end_pos);
    }

    /// Strips any of ` `, `\n`, `\t`, `\v`, `\f`, `\r` from the start and end of
    /// the string.
    #[inline]
    pub fn trim_space(self) string {
        return self.trim(" \n\t\v\f\r");
    }

    /// Strips any of the characters given in `cutset` from the start and end of
    /// the string.
    pub fn trim(self, cutset: string) string {
        if self.len < 1 or cutset.len < 1 {
            return self;
        }
        let (mut pos_left: usize, mut pos_right: usize) = (0, self.len - 1);
        let mut cs_match = true;
        while pos_left <= self.len and pos_right >= -1 and cs_match {
            cs_match = false;
            for cs in cutset.as_bytes() {
                if unsafe { self.ptr[pos_left] == cs } {
                    pos_left += 1;
                    cs_match = true;
                    break;
                }
            }
            for cs2 in cutset.as_bytes() {
                if unsafe { self.ptr[pos_right] == cs2 } {
                    pos_right -= 1;
                    cs_match = true;
                    break;
                }
            }
            if pos_left > pos_right {
                return empty_string;
            }
        }
        return self.slice(pos_left, pos_right + 1);
    }

    /// Strips any of the characters given in `cutset` from the left of the
    /// string.
    pub fn trim_left(self, cutset: string) string {
        if self.len < 1 or cutset.len < 1 {
            return self;
        }
        let mut pos: usize = 0;
        while pos < self.len : pos += 1 {
            let mut found = false;
            for cs in cutset.as_bytes() {
                if unsafe { self.ptr[pos] == cs } {
                    found = true;
                    break;
                }
            }
            if !found {
                break;
            }
        }
        return self.slice(pos, self.len);
    }

    /// Strips any of the characters given in `cutset` from the right of the
    /// string.
    pub fn trim_right(self, cutset: string) string {
        if self.len < 1 or cutset.len < 1 {
            return self;
        }
        let mut pos = self.len - 1;
        while pos >= 0 : pos -= 1 {
            let mut found = false;
            for cs in cutset.as_bytes() {
                if unsafe { self.ptr[pos] == cs } {
                    found = true;
                }
            }
            if !found {
                break;
            }
        }
        if pos < 0 {
            return empty_string;
        }
        return self.slice(pos + 1, self.len);
    }

    /// Replaces all occurences of `rep` with the string passed in `with_`.
    pub fn replace(self, rep: string, with_: string) string {
        if self.len == 0 or rep.len == 0 or rep.len > self.len {
            return self;
        } else if !self.contains(rep) {
            return self;
        }
        let mut idx: usize = 0;
        let mut idxs: [usize] = [];
        while {
            idx = self.index_after_of(rep, idx) ?? break;
            idxs.push(idx);
            idx += rep.len;
        }
        if idxs.len == 0 {
            return self;
        }
        let new_len = self.len + idxs.len * (with_.len - rep.len);
        let mut b = @as(*mut u8, mem_alloc(new_len) catch @unreachable());
        let (mut b_i: usize, mut s_idx: usize) = (0, 0);
        unsafe {
            for rep_pos in idxs {
                for i in s_idx..rep_pos {
                    b[b_i] = self.ptr[i];
                    b_i += 1;
                }
                s_idx = rep_pos + rep.len;
                for i2 in 0..with_.len {
                    b[b_i] = with_.ptr[i2];
                    b_i += 1;
                }
            }
            if s_idx < self.len {
                for i3 in s_idx..self.len {
                    b[b_i] = self.ptr[i3];
                    b_i += 1;
                }
            }
            b[new_len] = 0;
        }
        return unsafe { string.from_raw_with_len(b, new_len) };
    }

    pub fn as_bytes(self) [u8] {
        return unsafe {
            Vec.from_array_no_alloc(@as(*mut u8, self.ptr), @size_of(u8), self.len)
        };
    }

    pub fn ==(self, rhs: Self) bool {
        if self.len != rhs.len {
            return false;
        }
        unsafe {
            if self.len > 0 {
                let last_idx = self.len - 1;
                if self.ptr[last_idx] != rhs.ptr[last_idx] {
                    return false;
                }
            }
        }
        return mem_cmp(self.ptr, rhs.ptr, rhs.len) == 0;
    }

    pub fn !=(self, rhs: Self) bool {
        return !(self == rhs);
    }

    pub fn <(self, rhs: Self) bool {
        for i in 0..self.len {
            unsafe {
                if i >= rhs.len or self.ptr[i] > rhs.ptr[i] {
                    return false;
                } else if self.ptr[i] < rhs.ptr[i] {
                    return true;
                }
            }
        }
        if self.len < rhs.len {
            return true;
        }
        return false;
    }

    pub fn >(self, rhs: Self) bool {
        return !(self < rhs);
    }

    pub fn <=(self, rhs: Self) bool {
        return self < rhs or self == rhs;
    }

    pub fn >=(self, rhs: Self) bool {
        return self > rhs or self == rhs;
    }

    /// Returns `true` if the string contains `substr`.
    pub fn contains(self, substr: string) bool {
        if substr.len == 0 {
            return true;
        }
        if let _ = self.index_of(substr) {
            return true;
        }
        return false;
    }

    /// Returns `true` if the string starts with `p`.
    pub fn starts_with(self, p: string) bool {
        if p.len > self.len {
            return false;
        }
        for i in 0..p.len {
            if unsafe { self.ptr[i] != p[i] } {
                return false;
            }
        }
        return true;
    }

    /// Returns `true` if the string ends with `p`.
    pub fn ends_with(self, p: string) bool {
        if p.len > self.len {
            return false;
        }
        for i in 0..p.len {
            if unsafe { p[i] != self.ptr[self.len - p.len + i] } {
                return false;
            }
        }
        return true;
    }

    /// Returns the number of runes contained in `self`.
    pub fn runes_count(self) usize {
        return cstr_runes_count(unsafe { self.ptr }, self.len);
    }

    pub fn is_empty(self) bool {
        return self.len == 0;
    }

    fn slice(self, start: usize, end: usize) Self {
        unsafe {
            if start > end or start > self.len or end > self.len {
                process_panic(
                    "string slice index out of range (range: {}..{}, len: {})", start,
                    end, self.len
                );
            }
            let len = end - start;
            if len == self.len {
                return self;
            }
            return Self(@ptr_add(self.ptr, start), len, is_ref: true);
        }
    }

    fn slice_from(self, start: usize) Self {
        return self.slice(start, self.len);
    }

    pub fn clone(self) Self {
        if self.len == 0 {
            return empty_string;
        }
        let res = @as(*mut u8, mem_alloc(self.len + 1) catch @unreachable());
        unsafe {
            mem_copy(res, self.ptr, self.len);
            res[self.len] = 0;
        }
        return Self(res, self.len);
    }

    pub fn to_string(self) Self {
        return self;
    }

    ~Self(self) {
        if !self.is_ref {
            unsafe {
                mem_dealloc(self.ptr);
            }
        }
    }
}
