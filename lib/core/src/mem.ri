// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

import pkg::Error;
import pkg::stdc: stdlib, string;

mod mem {
    pub errtype OutOfMemoryError;
    pub errtype MemoryOverlapError;

    /// Allocates dynamically a `size` bytes block of memory on the heap.
    /// Returns a pointer to the memory address of the allocated space.
    ///
    /// NOTE: Unlike the `mem::calloc` function, `mem::alloc` will not zero
    /// the memory block.
    pub fn alloc(size: usize) !*mut void {
        let ptr = unsafe { stdlib::malloc(size) };
        if (ptr == none) {
            raise OutOfMemoryError("insufficient memory is available");
        }
        return ptr;
    }

    /// Allocates dynamically a zeroed `n` bytes block of memory on the heap.
    /// Returns a pointer to the memory address of the allocated space.
    pub fn calloc(n: usize) !*mut void {
        let ptr = unsafe { stdlib::calloc(1, n) };
        if (ptr == none) {
            raise OutOfMemoryError("insufficient memory is available");
        }
        return ptr;
    }

    /// Resizes the memory block `ptr` with `sz` bytes.
    ///
    /// NOTE: The `ptr` must be a pointer to an existing memory block previously
    /// allocated with `mem::alloc` or `mem::calloc`.
    pub fn realloc(ptr: *mut void, sz: usize) !*mut void {
        if (sz == 0) {
            unsafe {
                dealloc(ptr);
            }
            return none;
        }
        let ptr_ = unsafe { stdlib::realloc(ptr, sz) };
        if (ptr_ == none) {
            raise OutOfMemoryError("insufficient memory is available");
        }
        return ptr_;
    }

    /// Fills the first `n` bytes of the memory area pointed to by `s`, with the
    /// constant byte `c`. It returns a pointer to the memory area `s`.
    pub fn set(s: *mut void, c: i32, n: usize) !*mut void {
        if (s == none) {
            raise Error("argument `s` is none");
        }
        return unsafe { string::memset(s, c, n) };
    }

    /// Copies `sz` bytes from memory area `source` to memory area `dest` and returns
    /// a pointer to `dest`.
    ///
    /// NOTE: The memory areas *MAY* overlap: copying takes place as though the bytes
    /// in `source` are first copied into a temporary array that does not overlap
    /// `source` or `dest`, and the bytes are then copied from the temporary array to
    /// `dest`.
    pub fn move(dest: *mut void, src: *const void, sz: usize) !*mut void {
        if (src == none) {
            raise Error("argument `src` is none");
        }
        return unsafe { string::memmove(dest, src, sz) };
    }

    /// Copies `sz` bytes from memory area `source` to memory area `dest` and returns
    /// a pointer to `dest`.
    ///
    /// NOTE: The memory areas *MUST NOT OVERLAP*. Use `mem::move`, if the memory areas
    /// do overlap.
    pub fn copy(dest: *mut void, src: *const void, sz: usize) !*mut void {
        if (src == dest) {
            raise MemoryOverlapError("`dest` and `src` do overlap");
        }
        return unsafe { string::memcpy(dest, src, sz) };
    }

    /// Allocates dynamically a `sz` bytes block of memory on the heap, then copies
    /// the contents of `source` into the allocated space and returns a pointer to
    /// the newly allocated space.
    pub fn dup(src: *const void, sz: usize) !*mut void {
        if (sz == 0) {
            return calloc(1).!;
        }
        return copy(alloc(sz).!, src, sz).!;
    }

    /// Swaps the values at two mutable locations, without deinitializing either one.
    pub fn swap(x: *mut void, y: *mut void) {
        if (x != y) {
            let tmp = x;
            x = y;
            y = tmp;
        }
    }

    /// Compares the first `n` bytes (each interpreted as `u8`) of the memory areas
    /// `s1` and `s2`. It returns an integer less than, equal to, or greater than
    /// zero, if the first n bytes of `s1` is found, respectively, to be less than,
    /// to match, or be greater than the first n bytes of `s2`.
    ///
    /// For a nonzero return value, the sign is determined by the sign of the
    /// difference between the first pair of bytes (interpreted as `u8`) that
    /// differ in `s1` and `s2`.
    ///
    /// If n is zero, the return value is zero.
    ///
    /// NOTE: Do NOT use `mem::cmp` to compare security critical data, such
    /// as cryptographic secrets, because the required CPU time depends on the
    /// number of equal bytes. You should use a function that performs comparisons
    /// in constant time for this.
    pub fn cmp(s1: *const void, s2: *const void, n: usize) i32 {
        return unsafe { string::memcmp(s1, s2, n) };
    }

    /// Deallocates manually the memory referenced by `ptr`.
    pub unsafe fn dealloc(ptr: *mut void) {
        if (ptr != none) {
            unsafe {
                stdlib::free(ptr);
                ptr = none;
            }
        }
    }
}
