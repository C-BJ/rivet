// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c";
import "c/libc";

/// Returns the path name of the executable that started the current process.
pub fn process_executable() !string {
    let mut res: [libc.MAX_PATH_LEN]u8 = []!;
    let count = unsafe {
        libc.readlink(c"/proc/self/exe", @addr_of(res[0]), libc.MAX_PATH_LEN)
    };
    if count < 0 {
        return Error("failed at reading /proc/self/exe to get exe path");
    }
    return unsafe {
        string.from_raw_with_len(@addr_of(res[0]), @as(usize, count)).clone()
    };
}

/// Sets the current working directory to the new directory in `path`.
pub fn process_set_cwd(path: string) ! {
    if unsafe { libc.chdir(path.ptr) == -1 } {
        return c.last_errno_error();
    }
}

/// Returns the absolute path of the current working directory.
pub fn process_get_cwd() !string {
    unsafe {
        let mut buf: [libc.MAX_PATH_LEN]mut u8 = []!;
        if let res = libc.getcwd(@addr_of_mut(buf[0]), libc.MAX_PATH_LEN) {
            return string.from_raw(@addr_of(buf[0])).clone();
        }
    }
    return c.last_errno_error();
}

/// Returns the OS-assigned process identifier associated with this
/// process.
#[inline]
pub fn process_id() u32 {
    return unsafe { libc.getpid() };
}

/// Terminates current thread execution immediately after displaying a
/// message, followed by a backtrace.
pub fn process_panic(s: string = "", args: ...ToString) never {
    console_eprintln("panic: {}", s.fmt(args));
    bt_print(2);
    process_exit(101);
}

/// Terminates the process in an abnormal fashion.
///
/// The function will never return and will immediately terminate the
/// current process in a platform specific "abnormal" manner.
///
/// The process's termination will be similar to that from the C `abort()`
/// function. On Unix, the process will terminate with signal `SIGABRT`,
/// which typically means that the shell prints "Aborted".
pub fn process_abort() never {
    unsafe {
        drop_globals();
        libc.abort();
    }
}

/// Terminates the current process with the specified exit code.
///
/// This function will never return and will immediately terminate the
/// current process. The exit code is passed through to the underlying
/// OS and will be available for consumption by another process.
pub fn process_exit(code: i32 = 0) never {
    unsafe {
        drop_globals();
        libc.exit(code);
    }
}
