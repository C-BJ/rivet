// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

// #[used]
fn checked_8_add(lhs: i8, rhs: i8) (i8, bool) {
    if (lhs == MAX_INT8) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_8_sub(lhs: i8, rhs: i8) (i8, bool) {
    if (lhs == MIN_INT8) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_8_mul(lhs: i8, rhs: i8) (i8, bool) {
    if (lhs == MAX_INT8) { return (0, false); }
    let v64 = as(lhs, i64) * as(rhs, i64);
    if (v64 > MAX_INT8) { return (0, false); }
    let result = as(v64, i8);
    return (result, true);
}

// #[used]
fn checked_16_add(lhs: i16, rhs: i16) (i16, bool) {
    if (lhs == MAX_INT16) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_16_sub(lhs: i16, rhs: i16) (i16, bool) {
    if (lhs == MIN_INT16) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_16_mul(lhs: i16, rhs: i16) (i16, bool) {
    if (lhs == MAX_INT16) { return (0, false); }
    let v64 = as(lhs, i64) * as(rhs, i64);
    if (v64 > MAX_INT16) { return (0, false); }
    let result = as(v64, i16);
    return (result, true);
}

// #[used]
fn checked_32_add(lhs: i32, rhs: i32) (i32, bool) {
    if (lhs == MAX_INT32) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_32_sub(lhs: i32, rhs: i32) (i32, bool) {
    if (lhs == MIN_INT32) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_32_mul(lhs: i32, rhs: i32) (i32, bool) {
    if (lhs == MAX_INT32) { return (0, false); }
    let v64 = as(lhs, i64) * as(rhs, i64);
    if (v64 > MAX_INT32) { return (0, false); }
    let result = as(v64, i32);
    return (result, true);
}

// #[used]
fn checked_64_add(lhs: i64, rhs: i64) (i64, bool) {
    if (lhs == MAX_INT64) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_64_sub(lhs: i64, rhs: i64) (i64, bool) {
    if (lhs == MIN_INT64) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_64_mul(lhs: i64, rhs: i64) (i64, bool) {
    if (lhs == MAX_INT64) { return (0, false); }
    let v64 = as(lhs, i64) * as(rhs, i64);
    if (v64 > MAX_INT64) { return (0, false); }
    let result = as(v64, i64);
    return (result, true);
}

// #[used]
fn checked_unsigned_8_add(lhs: u8, rhs: u8) (u8, bool) {
    if (lhs == MAX_UINT8) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_8_sub(lhs: u8, rhs: u8) (u8, bool) {
    if (lhs == 0) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_8_mul(lhs: u8, rhs: u8) (u8, bool) {
    if (lhs == MAX_UINT8) { return (0, false); }
    let v64 = as(lhs, u64) * as(rhs, u64);
    if (v64 > MAX_UINT8) { return (0, false); }
    let result = as(v64, u8);
    return (result, true);
}

// #[used]
fn checked_unsigned_16_add(lhs: u16, rhs: u16) (u16, bool) {
    if (lhs == MAX_UINT16) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_16_sub(lhs: u16, rhs: u16) (u16, bool) {
    if (lhs == 0) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_16_mul(lhs: u16, rhs: u16) (u16, bool) {
    if (lhs == MAX_UINT16) { return (0, false); }
    let v64 = as(lhs, u64) * as(rhs, u64);
    if (v64 > MAX_UINT16) { return (0, false); }
    let result = as(v64, u16);
    return (result, true);
}

// #[used]
fn checked_unsigned_32_add(lhs: u32, rhs: u32) (u32, bool) {
    if (lhs == MAX_UINT32) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_32_sub(lhs: u32, rhs: u32) (u32, bool) {
    if (lhs == 0) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_32_mul(lhs: u32, rhs: u32) (u32, bool) {
    if (lhs == MAX_UINT32) { return (0, false); }
    let v64 = as(lhs, u64) * as(rhs, u64);
    if (v64 > MAX_UINT32) { return (0, false); }
    let result = as(v64, u32);
    return (result, true);
}

// #[used]
fn checked_unsigned_64_add(lhs: u64, rhs: u64) (u64, bool) {
    if (lhs == MAX_UINT64) { return (0, false); }
    let result = lhs + rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_64_sub(lhs: u64, rhs: u64) (u64, bool) {
    if (lhs == 0) { return (0, false); }
    let result = lhs - rhs;
    return (result, true);
}

// #[used]
fn checked_unsigned_64_mul(lhs: u64, rhs: u64) (u64, bool) {
    if (lhs == MAX_UINT64) { return (0, false); }
    let v64 = as(lhs, u64) * as(rhs, u64);
    if (v64 > MAX_UINT64) { return (0, false); }
    let result = as(v64, u64);
    return (result, true);
}
