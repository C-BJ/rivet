// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "std/sys";

import "../prefs";
import "../report";
import "../token";

pub class Table {
    pub mut universe: Mod;
    pub mut prefs: prefs.Prefs;
    pub mut source_files: [SourceFile];

    pub pointer_size: usize;

    pub mut runtime_mod: Mod;

    #[inline]
    pub fn new(prefs: prefs.Prefs) Table {
        return Table(universe(), prefs, pointer_size: if prefs.target_is_64bit {
            8
        } else {
            4
        });
    }

    pub fn evalue_pp_symbol(self, name: string, pos: token.Pos) bool {
        switch name {
            // operating systems
            "_LINUX_", "_WINDOWS_" => {
                return if let os = sys.OS.from_string(name) {
                    os == self.prefs.target_os
                } else {
                    false
                };
            },
            // architectures
            "_X86_", "_AMD64_" => {
                return if let os = sys.Arch.from_string(name) {
                    os == self.prefs.target_arch
                } else {
                    false
                };
            },
            // bits
            "_x32_", "_x64_" => {
                return if name == "_x32_" {
                    !self.prefs.target_is_64bit
                } else {
                    self.prefs.target_is_64bit
                };
            },
            // endian
            "_LITTLE_ENDIAN_", "_BIG_ENDIAN_" => {
                return if name == "_LITTLE_ENDIAN_" {
                    self.prefs.target_is_little_endian
                } else {
                    !self.prefs.target_is_little_endian
                };
            },
            // optimize modes
            "_DEBUG_", "_RELEASE_" => {
                return if name == "_DEBUG_" {
                    self.prefs.optimize_mode is .Debug
                } else {
                    self.prefs.optimize_mode is .Release
                };
            },
            "_TESTS_" => return self.prefs.is_test,
            else => return if name.starts_with("_") and name.ends_with("_") {
                report.error("unknown runtime flag: `{}`".fmt(name), pos).emit();
                false
            } else {
                name in self.prefs.flags
            }
        }
    }
}
