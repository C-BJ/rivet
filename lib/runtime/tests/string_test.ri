test "string.concat()" {
    x := "Hello ".concat("World!");
    @assert(x == "Hello World!");
}

test "string.fmt()" {
    @assert("true: {}".fmt(true) == "true: true");
    @assert("false: {}".fmt(false) == "false: false");

    @assert("here is a number: {}".fmt(5) == "here is a number: 5");

    @assert(
        "reverse order: {2}, {1}, {0}".fmt(1, 2, 3) == "reverse order: 3, 2, 1"
    );

    @assert("rune: `{}`".fmt('Á') == "rune: `Á`");

    @assert("{0:-4}k".fmt(1) == "1   k");
    @assert("{:4}k".fmt(2004) == "2004k");
    @assert("{:4}k".fmt(20) == "20  k");
    @assert("{:4}k".fmt(2004) == "20  k");
    @assert("|{:2}|".fmt(2222) == "|2222|");
}

test "string.index_of_byte()" {
    if i := "aeiou".index_of_byte(b'e') {
        @assert(i == 1);
    } else {
        @assert(false);
    }
}

test "string.index()" {
    if i := "aeiou".index_of("io") {
        @assert(i == 2);
    } else {
        @assert(false);
    }
}

test "string.contains()" {
    @assert("The Rivet language".contains("Rivet"));
}

test "string.starts_with()" {
    @assert("The Rivet language".starts_with("The"));
}

test "string.ends_with()" {
    @assert("The Rivet language".ends_with("language"));
}

test "string.runes_count()" {
    @assert("José".runes_count() == 4);
}

test "string.tokenize()" {
    mut iterator := "   abc def    ghi  ".tokenize(b' ');
    mut res := @vec(string, 3);
    while w := iterator.next() {
        res.push(w);
    }
    @assert(res.len == 3);
    @assert(res[0] == "abc");
    @assert(res[1] == "def");
    @assert(res[2] == "ghi");
}
