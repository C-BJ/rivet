// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "std/env";
import "std/strings";
import "std/console";
import "std/fs/path";
import "std/process";

import "../prefs";
import "../token";
import "../utils";

public let mut reports: ReportTable = ReportTable();

#[inline]
public func total_errors() usize {
    return reports.errors;
}

#[inline]
public func total_warns() usize {
    return reports.warns;
}

public class ReportTable {
    public mut prefs: prefs.Prefs;
    public mut errors: usize;
    public mut warns: usize;
}

public enum ReportKind as uint8 {
    Error,
    Warn,
    Note,
    Help
}

public class ReportExtra {
    public kind: ReportKind;
    public msg: string;
}

#[inline]
public func error(msg: string, pos: token.Pos) Report {
    return Report(.Error, pos, msg);
}

#[inline]
public func warn(msg: string, pos: token.Pos) Report {
    return Report(.Warn, pos, msg);
}

public class Report {
    public kind: ReportKind;
    public pos: token.Pos;
    public msg: string;
    public mut extras: []ReportExtra;

    #[inline]
    public func add_note(mut self, msg: string) {
        self.extras.push(ReportExtra(.Note, msg));
    }

    #[inline]
    public func add_help(mut self, msg: string) {
        self.extras.push(ReportExtra(.Help, msg));
    }

    public func emit(self) {
        console.eprintln(
            utils.bold("{}:{}:{}: {} {}"), path_styled_for_error_messages(self.pos.file),
            self.pos.line, self.pos.col,
            if self.kind == .Error { utils.red("error:") } else { utils.yellow("warning:") },
            self.msg
        );
        formatted_line(self.pos);
        if self.kind == .Error {
            reports.errors += 1;
        } else {
            reports.warns += 1;
        }
        for extra in self.extras {
            let start = utils.bold("      {} {}".fmt(utils.blue("="), if extra.kind == .Note {
                utils.cyan("note:")
            } else {
                "help:"
            }));
            console.eprintln("{} {}", start, extra.msg);
        }
    }
}

func formatted_line(pos: token.Pos) {
    if let line = utils.source_cache.find_line(pos.file, pos.line) {
        console.eprintln(
            "{} {} {}", utils.bold(utils.blue("{:5}".fmt(pos.line + 1))),
            utils.bold(utils.blue("|")), line.replace("\t", " ")
        );
        let start_column = utils.max(0, utils.min(pos.col - 1, line.len));
        let end_column = utils.max(0, utils.min((pos.col - 1) + utils.max(0, pos.len), line.len));
        let mut sb = strings.Builder.new(line.len);
        let mut i: usize = 0;
        while i < start_column {
            let b = line[i];
            if b.is_space() {
                sb.write_byte(b);
                i += 1;
            } else {
                let char_len = b.len_utf8();
                sb.write_string(" ".repeat(line[i..i + char_len].runes_count()));
                i += char_len;
            }
        }
        sb.write_string(utils.green("^"));
        if pos.len > 1 {
            sb.write_string(
                utils.green("~".repeat(line[start_column..end_column].runes_count() - 1))
            );
        }
        console.eprintln("      {} {}", utils.bold(utils.blue("|")), sb.to_string());
    }
}

let NORMALIZED_WORKDIR: string = process.WD_AT_STARTUP.replace("\\", "/").concat("/");
let ERROR_PATHS_ABSOLUTE: bool = (env.get("RIVET_ERROR_PATHS") ?? "relative") == "absolute";

// NOTE: path_styled_for_error_messages will *always* use `/` in the error paths, no
// matter the OS, to ensure stable compiler error output in the tests.
public func path_styled_for_error_messages(path_: string) string {
    let rpath = (path.resolve(path_) catch path_).replace("\\", "/");
    return if ERROR_PATHS_ABSOLUTE {
        rpath
    } else {
        path.relative(NORMALIZED_WORKDIR, rpath) catch path_
    };
}
