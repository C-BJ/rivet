// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c/libc";

let mut runtime_started: bool = false;

fn segfault_handler(_: i32) {
    console_eprintln(
        if unsafe { runtime_started } {
            "panic: segmentation fault detected"
        } else {
            "panic: segmentation fault detected while starting the runtime"
        }
    );
    bt_print(3);
    process_exit(1);
}

fn panic_if(cond: bool, msg: string) {
    if cond {
        console_eprintln("panic: {}", msg);
        bt_print(2);
        process_exit(1);
    }
}

fn assert(cond: bool, msg: string) {
    if !cond {
        console_eprintln("panic: assertion failed: {}", msg);
        bt_print(2);
        process_exit(1);
    }
}

#[inline]
fn internal_alloc(size: usize) *mut void {
    return mem_alloc(size) catch {
        process_panic("internal error: cannot allocate memory");
    };
}

#[inline]
fn internal_zeroed(size: usize) *mut void {
    return mem_zeroed(size) catch {
        process_panic("internal error: cannot allocate zeroed memory");
    };
}

#[inline]
fn internal_dup(src: *void, sz: usize) *mut void {
    return mem_dup(src, sz) catch {
        process_panic("internal error: cannot duplicate memory");
    };
}

#[inline]
fn internal_resize(ptr: ?*mut void, sz: usize) *mut void {
    return mem_resize(ptr, sz) catch {
        process_panic("internal error: cannot resize memory");
    };
}

fn class_downcast(current_id: usize, expected_id: usize) {
    if current_id != expected_id {
        // TODO: replace indexes with names
        console_eprintln("panic: cannot cast {} to {}", current_id, expected_id);
        bt_print(3);
        process_exit(1);
    }
}

struct EnumInfo {
    _rc: usize;
    _id: usize;
    obj: *void;
}

fn enum_cast(ptr: *void, expected_id: usize) *void {
    let enum_info = @as(*EnumInfo, ptr);
    if enum_info._id != expected_id {
        // TODO: replace indexes with names
        console_eprintln("panic: cannot cast {} to {}", enum_info._id, expected_id);
        bt_print(3);
        process_exit(1);
    }
    return enum_info.obj;
}
