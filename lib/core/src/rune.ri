// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

const MAX_ONE_B: uint32 = 0x80;
const MAX_TWO_B: uint32 = 0x800;
const MAX_THREE_B: uint32 = 0x10000;

extend rune : Stringable {
    /// The highest valid codepoint a `rune` can have.
    public const MAX: rune = 0x10FFFF;

    /// `U+FFFD REPLACEMENT CHARACTER` (ï¿½) is used in Unicode to represent a
    /// decoding error.
    public const REPLACEMENT_CHARACTER: rune = 0xFFFD;

    public func from_uint32(i: uint32) !rune {
        if (i > @cast(uint32, Self.MAX)) or (i >= 0xD800 and i <= 0xDFFF) {
            return RuneFromU32Error();
        }
        return @cast(rune, i);
    }

    /// Converts a digit in the given radix to a `rune`.
    ///
    /// A 'radix' here is sometimes also called a 'base'. A radix of two
    /// indicates a binary number, a radix of ten, decimal, and a radix of
    /// sixteen, hexadecimal, to give some common values. Arbitrary
    /// radices are supported.
    ///
    /// `rune_from_digit()` will return `nil` if the input is not a digit
    /// in the given radix.
    ///
    /// Panics if given a radix larger than 36.
    public func from_digit(num: uint32, radix: uint32) ?rune {
        if radix > 36 {
            process_panic("rune.from_digit: radix is too high (maximum 36)");
        }
        if num < radix {
            num_ := @cast(uint8, num);
            if num_ < 10 {
                return @cast(rune, b'0' + num_);
            } else {
                return @cast(rune, b'a' + num_ - 10);
            }
        }
        return nil;
    }

    #[inline]
    public func len_utf8(self) usize {
        return len_utf8(@cast(uint32, self));
    }

    public func to_string(&self) string {
        len := self.len_utf8();
        res := @cast([*]mut uint8, internal_alloc(len + 1));
        _ = unsafe { utf32_decode_to_buffer(@cast(uint32, self.*), res) };
        return string(unsafe { res }, len);
    }
}

func utf32_decode_to_buffer(code: uint32, buffer: [*]mut uint8) int32 {
    icode := @cast(int32, code);
    unsafe {
        switch {
            (icode <= 127) => { // 0x7F
                buffer[0] = @cast(uint8, icode);
                return 1;
            },
            (icode <= 2047) => { // 0x7FF
                buffer[0] = @cast(uint8, 192) | @cast(uint8, icode >> 6); // 0xC0 - 110xxxxx
                buffer[1] = @cast(uint8, 128) | @cast(uint8, icode & 63); // 0x80 - 0x3F - 10xxxxxx
                return 2;
            },
            (icode <= 65535) => { // 0xFFFF
                buffer[0] = @cast(uint8, 224) | @cast(uint8, icode >> 12); // 0xE0 - 1110xxxx
                buffer[1] = @cast(uint8, 128) | (@cast(uint8, icode >> 6) & 63); // 0x80 - 0x3F - 10xxxxxx
                buffer[2] = @cast(uint8, 128) | @cast(uint8, icode & 63); // 0x80 - 0x3F - 10xxxxxx
                return 3;
            },
            (icode <= 1114111) => { // 0x10FFFF
                buffer[0] = @cast(uint8, 240) | @cast(uint8, icode >> 18); // 0xF0 - 11110xxx
                buffer[1] = @cast(uint8, 128) | (@cast(uint8, icode >> 12) & 63); // 0x80 - 0x3F - 10xxxxxx
                buffer[2] = @cast(uint8, 128) | (@cast(uint8, icode >> 6) & 63); // 0x80 - 0x3F - 10xxxxxx
                buffer[3] = @cast(uint8, 128) | @cast(uint8, icode & 63); // 0x80 - 0x3F - 10xxxxxx
                return 4;
            },
            else => return 0
        }
    }
}

#[inline]
func len_utf8(code: uint32) usize {
    return if code < MAX_ONE_B {
        1
    } else if code < MAX_TWO_B {
        2
    } else if code < MAX_THREE_B {
        3
    } else {
        4
    };
}
