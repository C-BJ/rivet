// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

using pkg::utils::StaticBuffer;

pub mod demangle {
    pub fn demangle_symbol(name: str) String {
        let mut buf = StaticBuffer{};
        let mut res = String::with_capacity(name.len);

        // 2 = skip `_R` if it is a Rivet symbol
        let is_rivet_symbol = name.starts_with("_R");
        let mut idx: usize = if (is_rivet_symbol) 2 else 0;

        while (idx < name.len) {
            let byte = unsafe { name.ptr[idx] };
            if (is_rivet_symbol) {
                if (byte.is_digit()) {
                    buf.push(byte);
                    idx++;
                    continue;
                }

                if (!res.is_empty()) {
                    res.push_str("::");
                }

                for (_ in 0..as(usize, buf.as_u64())) {
                    res.push(unsafe { name.ptr[idx++] });
                }
                buf.clear();

                if (!unsafe { name.ptr[idx] }.is_digit()) {
                    break; // end
                }
            } else {
                res.push(byte);
            }
            idx++;
        }

        return res;
    }
}
