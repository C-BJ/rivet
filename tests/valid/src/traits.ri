trait Speaker {
    fn speak(&self) string;
}

class Animal2 : Speaker {
    fn speak(self) string {
        return "~ Animal2.speak() ~";
    }
}

class Frog : Animal2 {
    #[override]
    fn speak(self) string {
        return "Croack";
    }
}

class Lion : Animal2 { }

fn speaker(s: Speaker) string {
    return s.speak();
}

test "traits: calling class method" {
    @assert(speaker(Animal2()) == "~ Animal2.speak() ~");
}

test "traits: calling inherited method" {
    @assert(speaker(Lion()) == "~ Animal2.speak() ~");
}

test "traits: calling overrided method" {
    @assert(speaker(Frog()) == "Croack");
}

trait Reader {
    fn read(&self) u8;
}

trait Writer {
    fn write(&self, b: u8) bool;
}

trait ReaderWriter : Reader, Writer {
    fn write_and_read(&self, b: u8) u8;
}

struct SomeStream : ReaderWriter {
    fn read(&self) u8 {
        return b'A';
    }

    fn write(&self, b: u8) bool { return true; }

    fn write_and_read(&self, b: u8) u8 {
        _ = self.write(b);
        return self.read();
    }
}

fn writer(w: Writer) bool {
    return w.write(b'A');
}

fn reader(r: Reader) u8 {
    return r.read();
}

fn reader_writer(rw: ReaderWriter) u8 {
    return rw.write_and_read(b'A');
}

test "traits: inheritance" {
    let ss = SomeStream();
    @assert(writer(ss));
    @assert(reader(ss) == b'A');
    @assert(reader_writer(ss) == b'A');
}
