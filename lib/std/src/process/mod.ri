// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c";
import "c/libc";
import "runtime";

import { Builder } from "../strings";

pub alias id = runtime.process_id;
pub alias panic = runtime.process_panic;
pub alias abort = runtime.process_abort;
pub alias exit = runtime.process_exit;
pub alias executable = runtime.process_executable;
pub alias set_cwd = runtime.process_set_cwd;
pub alias get_cwd = runtime.process_get_cwd;

pub let ARGS: []string = unsafe { runtime.ARGS };
pub let WD_AT_STARTUP: string = get_cwd() catch ".";

struct Result {
	pub output: string;
	pub exit_code: i32;
}

/// Starts the specified command, waits for it to complete, and returns
/// both its output and the exit code.
pub fn execute(cmd: string) Result {
    let pcmd = if cmd.contains("2>") { cmd } else { "{} 2>&1".fmt(cmd) };
    unsafe {
        if let f = libc.popen(pcmd.ptr, c"r") {
            let fd = libc.fileno(f);
            let mut buf: [4096]mut u8 = []!;
            let pbuf: *mut u8 = &mut buf[0];
            let mut output = Builder.new(1024);
            while {
                let len = libc.read(fd, pbuf, 4096);
                if len == 0 or len == -1 {
                    break;
                }
                output.write_raw_with_len(pbuf, @as(usize, len));
            }
            return Result(output.to_string(), libc.pclose(f));
        }
        return Result("execute( {} ) failed".fmt(cmd), -1);
    }
}
