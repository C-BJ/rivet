// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

static DIGIT_PAIRS: str = "0010203040506070809001112131415161718191021222324252627"
    "28292031323334353637383930414243444546474849405152535455565758595061626364656667"
    "68696071727374757677787970818283848586878889809192939495969798999";

pub const MAX_INT8: i8 = 127;
pub const MIN_INT8: i8 = -128;
pub const MAX_INT16: i16 = 32767;
pub const MIN_INT16: i16 = -32768;
pub const MAX_INT32: i32 = 2147483647;
pub const MIN_INT32: i32 = -2147483648;
pub const MAX_INT64: i64 = 9223372036854775807;
pub const MIN_INT64: i64 = -9223372036854775808;

pub const MAX_UINT8: u8 = 255;
pub const MAX_UINT16: u16 = 65535;
pub const MAX_UINT32: u32 = 4294967295;
pub const MAX_UINT64: u64 = 18446744073709551615;

extend i32 {
    /// Returns the string representation of `self` with `max` chars.
    pub fn str_l(self, max: i32) String {
        unsafe {
            if (self == 0) {
                return "0".to_string();
            }
            let mut n = as(i64, self);
            let mut d: u32 = 0;

            let mut is_neg = false;
            if (n < 0) {
                n = -n;
                is_neg = true;
            }

            let mut index = as(usize, max);
            let buf = as(*mut u8, mem::alloc(as(usize, max + 1)) catch unreachable!());
            buf[index] = 0;
            index--;

            while (n > 0) {
                let n1 = as(i32, n / 100);
                d = as(u32, as(i32, n) - (n1 * 100)) << 1;
                n = n1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index--;
                d++;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index--;
            }
            index++;

            if (d < 20) {
				// remove head zero
				index++;
            }

            if (is_neg) {
				// prepend `-` if it's negative
				index--;
				buf[index] = b'-';
            }

            let diff = as(usize, max) - index;
            _ = mem::move(buf, buf + index, diff + 1) catch unreachable!();
            return String::from_raw(buf, diff);
        }
    }
}

extend i32 for ToString {
	/// Returns the value of `self` as a `String`.
	pub fn to_string(&self) String { return self.*.str_l(12); }
}

extend u8 {
    /// Returns `true` if the byte is a white space character. The following
    /// list is considered white space characters: ' ', '\t', '\n', '\v', '\f',
    /// '\r', 0x85, 0xA0
    pub fn is_space(self) bool {
        return self == 32 or (self > 8 and self < 14) or (self == 0x85)
            or (self == 0xA0);
    }

    /// Returns `true` if the byte is in range 0-9 and `false` otherwise.
    pub fn is_digit(self) bool {
        return (self >= b'0' and self <= b'9');
    }

    /// Returns `true` if the byte is either in range 0-9, a-f or A-F and false`
    /// otherwise.
    pub fn is_hex_digit(self) bool {
        return self.is_digit() or (self >= b'a' and self <= b'f')
            or (self >= b'A' and self <= b'F');
    }

    /// Returns `true` if the byte is in range 0-7 and `false` otherwise.
    pub fn is_oct_digit(self) bool {
        return self >= b'0' or self <= b'7';
    }

    /// Returns `true` if the byte is a binary digit (0 or 1) and `false` otherwise.
    pub fn is_bin_digit(self) bool {
        return self == b'0' or self == b'1';
    }

    /// Returns `true` if the byte is in range a-z or A-Z and `false` otherwise.
    pub fn is_letter(self) bool {
        return (self >= b'a' and self <= b'z') or (self >= b'A' and self <= b'Z');
    }

    /// Returns `true` if the byte is in range a-z or A-Z or 1-9 and `false` otherwise.
    pub fn is_alphanum(self) bool {
        return self.is_letter() or self.is_digit();
    }

    /// Returns `true` if the byte is upper and `false` otherwise.
    pub fn is_upper(self) bool {
        return (self >= b'A' and self <= b'Z');
    }

    /// Returns `true` if the byte is lower and `false` otherwise.
    pub fn is_lower(self) bool {
        return (self >= b'a' and self <= b'z');
    }

    /// Calculates length to read from the first byte.
    pub fn len_utf8(self) usize {
        return as(usize, (as(u64, 0xE5000000) >> ((self >> 3) & 0x1E) & 3) + 1);
    }
}
