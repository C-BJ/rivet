// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "std/traits";

pub let NO_POS: Pos = Pos();

pub struct Pos : traits.ToString {
    pub file: string;
    pub line: usize;
    pub col: usize;
    pub mut len: usize;
    pub pos: usize;

    pub fn +(&self, other: &Pos) Pos {
		return Pos(len: other.pos - self.pos + other.len, ...self.*);
    }

    pub fn to_string(&self) string {
        return "{}:{}:{}".fmt(self.file, self.line + 1, self.col);
    }
}

pub struct Token : traits.ToString {
    pub lit: string;
    pub kind: Kind;
    pub len: usize;
    pub pos: Pos;

    pub fn to_debug_string(&self) string {
        return "rivet.token.Token(kind: '{}', lit: '{}', pos: {})".fmt(
            self.kind, self.lit, self.pos
        );
    }

    pub fn to_string(&self) string {
        let mut str = self.kind.to_string();
        if !str[0].is_alnum() {
            return "token `{}`".fmt(str);
        }
        if is_keyword(self.lit) {
            str = "keyword";
        }
        if self.kind != .DocComment and self.lit != "" {
            str = str.concat(" `{}`".fmt(self.lit));
        }
        return str;
    }
}
