// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import rivet/token;

public enum Expr {
    Empty: token.Pos,
    Type: Type,
    Assign {
        left: Expr;
        op: token.Kind;
        right: Expr;
        pos: token.Pos;
    },
    Ident {
        name: string;
        scope: Scope;
        is_comptime: bool;
        pos: token.Pos;
    },
    SelfTy {
        scope: Scope;
        pos: token.Pos;
    },
    SelfLiteral {
        scope: Scope;
        pos: token.Pos;
    },
    NoneLiteral {
        pos: token.Pos;
    },
    BoolLiteral {
        value: bool;
        pos: token.Pos;
    },
    CharLiteral {
        value: string;
        is_byte: bool;
        pos: token.Pos;
    },
    IntegerLiteral {
        value: string;
        pos: token.Pos;
    },
    FloatLiteral {
        value: string;
        pos: token.Pos;
    },
    StringLiteral {
        value: string;
        is_raw: bool;
        is_bytestr: bool;
        is_cstr: bool;
        pos: token.Pos;
    },
    EnumLiteral {
        value: Expr;
        value_arg: Expr;
        has_value_arg: bool;
        is_instance: bool;
        from_is_cmp: bool;
        pos: token.Pos;
    },
    TupleLiteral {
        values: []Expr;
        pos: token.Pos;
    },
    VectorLiteral {
        values: []Expr;
        is_arr: bool;
        pos: token.Pos;
    },
    Paren {
        expr: Expr;
        pos: token.Pos;
    },
    Index {
        left: Expr;
        index: Expr;
        pos: token.Pos;
    },
    Unary {
        op: token.Kind;
        right: Expr;
        is_ref_mut: bool;
        pos: token.Pos;
    },
    Binary {
        left: Expr;
        right: Expr;
        op: token.Kind;
        has_var_name: bool;
        var_name: string;
        scope: Scope;
        pos: token.Pos;
    };

    [inline]
    public func position(self) token.Pos {
        return switch self is {
            .Empty as empty_pos => empty_pos,
            else => token.NO_POS
        };
    }
}
