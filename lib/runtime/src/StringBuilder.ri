// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c/libc";

public class StringBuilder : ToString {
    mut inner: Vec;

    /// Returns a string builder with capacity `cap`.
    #[inline]
    public fn new(cap: usize = 0) Self {
        return Self(unsafe { Vec.new(@size_of(u8), cap) });
    }

    public fn from_string(s: string) Self {
        if s.len == 0 {
            return Self.new();
        }
        return Self(unsafe {
            Vec.from_array(@as(*mut u8, s.ptr), @size_of(u8), s.len)
        });
    }

    #[inline]
    public fn write_byte(mut self, val: u8) {
        self.inner.push(unsafe { &val });
    }

    #[unsafe; inline]
    public fn write_raw(mut self, s: *u8) {
        unsafe {
            self.write_raw_with_len(s, libc.strlen(s));
        }
    }

    #[unsafe]
    public fn write_raw_with_len(mut self, s: [*]u8, len: usize) {
        let mut i: usize = 0;
        while i < len : i += 1 {
            self.write_byte(unsafe { s[i] });
        }
    }

    #[inline]
    public fn write_string(mut self, s: string) {
        unsafe {
            self.write_raw_with_len(s.ptr, s.len);
        }
    }

    public fn writeln(mut self, s: string) {
        unsafe {
            self.write_raw_with_len(s.ptr, s.len);
        }
        self.write_byte(0x0A);
    }

    public fn write_join(mut self, ss: []string, sep: string = "") {
        if ss.len == 1 {
            self.write_string(ss[0]);
        } else {
            for i, s in ss {
                self.write_string(s);
                if i < ss.len - 1 {
                    self.write_string(sep);
                }
            }
        }
    }

    #[inline]
    public fn write_fmt(mut self, s: string, args: ...ToString) {
        self.write_string(s.fmt(args));
    }

    public fn writeln_fmt(mut self, s: string, args: ...ToString) {
        self.write_string(s.fmt(args));
        self.write_string("\n");
    }

    /// Returns the number of runes contained in `self`.
    #[inline]
    public fn runes_count(self) usize {
        return cstr_runes_count(@as(*u8, self.inner.ptr), self.inner.len);
    }

    #[inline]
    public fn clear(mut self) {
        self.inner.len = 0;
    }

    #[inline]
    public fn len(self) usize {
        return self.inner.len;
    }

    #[inline]
    public fn cap(self) usize {
        return self.inner.cap;
    }

    #[inline]
    public fn is_empty(self) bool {
        return self.inner.len == 0;
    }

    #[inline]
    public fn to_string(self) string {
        return string(@as(*u8, self.inner.ptr), self.inner.len);
    }
}
