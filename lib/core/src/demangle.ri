// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

pub mod demangle {
    const BUFFER_SIZE: usize = 30;

    struct Buffer {
        mut buf: [u8; BUFFER_SIZE];
        mut len: usize;

        fn push(&mut self, byte: u8) {
            if (self.len < BUFFER_SIZE) {
                self.buf[self.len] = byte;
                self.len++;
            } else {
                panic("Buffer::push: index out of range");
            }
        }

        fn clear(&mut self) {
            while (self.len > 0) {
                self.buf[self.len] = 0;
                self.len--;
            }
        }
    }

    pub fn demangle_symbol(name: *const u8) String {
        let mut buf = Buffer{};
        let size = unsafe { stdc::strlen(name) };
        let mut res = String::with_capacity(size - 2);

        let mut idx: usize = 2; // skip `_R`
        while (idx < size) {
            let byte = unsafe { name[idx] };
            if (byte.is_digit()) {
                buf.push(byte);
                idx++;
                continue;
            }
            if (!res.is_empty()) {
                res.push_str("::");
            }
            let name_len = as(usize, unsafe { stdc::strtoul(&buf.buf[0], none, 10) });
            for (_ in 0..name_len) {
                res.push(unsafe { name[idx] });
                idx++;
            }
            buf.clear();
            if (!unsafe { name[idx] }.is_digit()) {
                break; // end
            }
        }

        return res;
    }
}
