// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c";
import "c/libc";
import "runtime";

import "../../mem";
import "../../strings";

public alias MAX_PATH_LEN = libc.MAX_PATH_LEN;
public const SEPARATOR: u8 = #if _WINDOWS_ b'\\' #else b'/' #endif;
public let SEPARATOR_STR: string = #if _WINDOWS_ "\\" #else "/" #endif;
public let DELIMITER: string = #if _WINDOWS_ ";" #else ":" #endif;

/// Returns `true` if the given byte is a valid path separator
#[inline]
public func is_separator(byte: u8) bool {
#if _WINDOWS_
    return byte == b'/' or byte == b'\\';
#else
    return byte == b'/';
#endif
}

/// Returns `true` if `path` (file or directory) exists.
#[inline]
public func exists(path: string) bool {
    return unsafe { libc.access(path.ptr, libc.O_RDONLY) == 0 };
}

/// Returns `true` if `path` is executable.
#[inline]
public func is_executable(path: string) bool {
    return unsafe { libc.access(path.ptr, libc.X_OK) == 0 };
}

/// Returns `true` if `path` is writable.
#[inline]
public func is_writable(path: string) bool {
    return unsafe { libc.access(path.ptr, libc.W_OK) == 0 };
}

/// Returns `true` if `path` is readable.
#[inline]
public func is_readable(path: string) bool {
    return unsafe { libc.access(path.ptr, libc.R_OK) == 0 };
}

/// Returns `true` if `path` is a directory.
public func is_directory(path: string) bool {
    let mut statbuf = libc.Stat();
    if unsafe { libc.stat(path.ptr, &mut statbuf) != 0 } {
        return false;
    }
    return @as(i32, statbuf.mode) & libc.S_IFMT == libc.S_IFDIR;
}

/// Returns `true` if `path` is a file.
#[inline]
public func is_file(path: string) bool {
    return exists(path) and !is_directory(path);
}

/// Returns `true` if path is absolute.
#[inline]
public func is_absolute(path: string) bool {
    return path.len > 0 and path[0] == SEPARATOR;
}

/// Returns a boolean indicating whether `path` is a link.
public func is_link(path: string) bool {
    let mut statbuf = libc.Stat();
    if unsafe { libc.lstat(path.ptr, &mut statbuf) != 0 } {
        return false;
    }
    return @as(i32, statbuf.mode) & libc.S_IFMT == libc.S_IFLNK;
}

/// Strip the last component from a file path.
/// If the path is a file in the current directory (no directory component)
/// then returns nil.
/// If the path is the root directory, returns nil.
public func dirname(path: string) ?string {
    if path.len == 0 {
        return nil;
    }
    let mut end_index: usize = path.len - 1;
    while path[end_index] == b'/' {
        if end_index == 0 {
            return nil;
        }
        end_index -= 1;
    }
    while path[end_index] != b'/' {
        if end_index == 0 {
            return nil;
        }
        end_index -= 1;
    }
    if end_index == 0 and path[0] == b'/' {
        return path[0..1];
    }
    if end_index == 0 {
        return nil;
    }
    return path[0..end_index];
}

public func basename(path: string) string {
    if path.len == 0 {
        return "";
    }
    let mut end_index: usize = path.len - 1;
    while path[end_index] == b'/' {
        if end_index == 0 {
            return "";
        }
        end_index -= 1;
    }
    let mut start_index: usize = end_index;
    end_index += 1;
    while path[start_index] != b'/' {
        if start_index == 0 {
            return path[0..end_index];
        }
        start_index -= 1;
    }
    return path[start_index + 1 .. end_index];
}

/// Returns the extension of the file name (if any).
/// This function will search for the file extension (separated by a `.`) and will
/// return the text after the `.`.
/// Files that end with `.`, or that start with `.` and have no other `.` in their
/// name, are considered to have no extension.
/// The returned slice is guaranteed to have its pointer within the start and end
/// pointer address range of `path`, even if it is length zero.
public func extension(path: string) string {
    let filename = basename(path);
    let index = filename.last_index_of_byte(b'.') ?? return path[path.len..];
    return if index == 0 { path[path.len..] } else { filename[index..] };
}

/// This function is like a series of `cd` statements executed one after another.
/// It resolves "." and "..".
/// The result does not have a trailing path separator.
/// If all paths are relative it uses the current working directory as a starting
/// point.
public func resolve(paths: ...string) !string {
    if paths.len == 0 {
        return runtime.process_get_cwd().!;
    }
    let mut first_index: usize = 0;
    let mut have_abs = false;
    let mut max_size: usize = 0;
    for i, p in paths {
        if is_absolute(p) {
            first_index = i;
            have_abs = true;
            max_size = 0;
        }
        max_size += p.len + 1;
    }
    let mut result_index: usize = 0;
    let result = if have_abs {
        @as([*]mut u8, mem.alloc(max_size).!)
    } else {
        let cwd = runtime.process_get_cwd().!;
        let tmp = @as([*]mut u8, mem.alloc(max_size + cwd.len + 1).!);
        mem.copy(tmp, cwd.ptr, cwd.len);
        result_index += cwd.len;
        tmp
    };
    errdefer unsafe {
        mem.dealloc(result)
    }
    for p in paths[first_index..] {
        let mut components = p.tokenize(SEPARATOR);
        while let component = components.next() {
            if component == "." {
                continue;
            } else if component == ".." {
                while {
                    if result_index == 0 {
                        break;
                    }
                    result_index -= 1;
                    if unsafe { result[result_index] == SEPARATOR } {
                        break;
                    }
                }
            } else {
                unsafe {
                    result[result_index] = SEPARATOR;
                }
                result_index += 1;
                unsafe {
                    mem.copy(
                        @ptr_add(result, result_index), component.ptr,
                        component.len
                    );
                }
                result_index += component.len;
            }
        }
    }
    if result_index == 0 {
        unsafe {
            result[0] = SEPARATOR;
        }
        result_index += 1;
    }
    return unsafe {
        string.from_raw_with_len(
            @as(*u8, mem.resize(result, result_index).!), result_index
        )
    };
}

/// Returns the relative path from `from_` to `to`. If `from` and `to` each
/// resolve to the same path (after calling `resolve` on each), a zero-length
/// string is returned.
public func relative(from_: string, to: string) !string {
    let resolved_from = resolve(from_).!;
    let resolved_to = resolve(to).!;
    let mut from_it = from_.tokenize(SEPARATOR);
    let mut to_it = to.tokenize(SEPARATOR);
    while {
        let from_component = from_it.next() ?? return to_it.rest();
        let to_rest = to_it.rest();
        if let to_component = to_it.next() {
            if from_component == to_component {
                continue;
            }
        }
        let mut up_count: usize = 1;
        while let _ = from_it.next() {
            up_count += 1;
        }
        let up_index_end = up_count * 3;
        let result = @as([*]mut u8, mem.alloc(up_index_end + to_rest.len).!);
        errdefer unsafe {
            mem.dealloc(result);
        }
        let mut result_index: usize = 0;
        while result_index < up_index_end {
            unsafe {
                result[result_index] = b'.';
                result_index += 1;
                result[result_index] = b'.';
                result_index += 1;
                result[result_index] = SEPARATOR;
                result_index += 1;
            }
        }
        if to_rest.len == 0 {
            // shave off the trailing slash
            return unsafe {
                string.from_raw_with_len(
                    @as(*u8, mem.resize(result, result_index - 1).!),
                    result_index - 1
                )
            };
        }
        unsafe {
            mem.copy(@ptr_add(result, result_index), to_rest.ptr, to_rest.len);
        }
        return unsafe { string.from_raw(result) };
    }
    return "";
}

public func join(paths: ...string) !string {
    if paths.len == 0 {
        return "";
    }
    // find first non-empty path index.
    let mut all_paths_provided_were_empty = false;
    let mut first_path_index: usize = 0;
    for index, path in paths {
        if path.len > 0 {
            first_path_index = index;
            all_paths_provided_were_empty = false;
            break;
        } else {
            all_paths_provided_were_empty = true;
            continue;
        }
    }
    if all_paths_provided_were_empty {
        // all paths provided were empty, so return early.
        return "";
    }
    // calculate length needed for resulting joined path buffer.
    let total_len = {
        let mut sum: usize = paths[first_path_index].len;
        let mut prev_path = paths[first_path_index];
        @assert(prev_path.len > 0);
        let mut i: usize = first_path_index + 1;
        while i < paths.len : i += 1 {
            let this_path = paths[i];
            if this_path.len == 0 {
                continue;
            }
            let prev_sep = is_separator(prev_path[prev_path.len - 1]);
            let this_sep = is_separator(this_path[0]);
            sum += @as(usize, !prev_sep and !this_sep);
            sum += if prev_sep and this_sep { this_path.len - 1 } else { this_path.len };
            prev_path = this_path;
        }
        sum + 1 // + 1 = NLL character
    };
    let buf = @as([*]mut u8, mem.alloc(total_len).!);
    unsafe {
        errdefer mem.dealloc(buf);
        buf[total_len] = 0;
    }
    let paths_first_path_index_value = paths[first_path_index];
    mem.copy(buf, paths_first_path_index_value.ptr, paths_first_path_index_value.len);
    let mut buf_index: usize = paths_first_path_index_value.len;
    let mut prev_path = paths_first_path_index_value;
    @assert(prev_path.len > 0);
    let mut i: usize = first_path_index + 1;
    while i < paths.len : i += 1 {
        let this_path = paths[i];
        if this_path.len == 0 {
            continue;
        }
        let prev_sep = is_separator(prev_path[prev_path.len - 1]);
        let this_sep = is_separator(this_path[0]);
        if !prev_sep and !this_sep {
            unsafe {
                buf[buf_index] = SEPARATOR;
            }
            buf_index += 1;
        }
        let adjusted_path = if prev_sep and this_sep {
            this_path[1..]
        } else {
            this_path
        };
        unsafe {
            mem.copy(@ptr_add(buf, buf_index), adjusted_path.ptr, adjusted_path.len);
        }
        buf_index += adjusted_path.len;
        prev_path = this_path;
    }
    // no need for shrink since buf is exactly the correct size.
    return unsafe { string.from_raw(buf) };
}

/// Joins the current working directory with the given `path` (if the `path` is
/// relative) and returns the absolute path representation.
public func absolute(path: string) !string {
    let cwd = runtime.process_get_cwd().!;
    if path.is_empty() {
        return cwd;
    }
    let rpath = resolve(path).!;
    if rpath == "." {
        return cwd;
    }
    if is_absolute(rpath) {
        return rpath;
    }
    return resolve(join(cwd, rpath).!).!;
}
