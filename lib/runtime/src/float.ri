// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c/libc";

extend comptime_float : Formattable {
    /// Returns the IEEE 754 binary representation of `self`, with the sign bit
    /// of `self` and the result in the same bit position.
    #[inline]
    public func bits(self) uint64 {
        return @as(float64, self).bits();
    }

    #[inline]
    public func to_string(self) string {
        return @as(float64, self).to_string();
    }
}

extend float32 : Formattable {
    /// Returns the floating-point number corresponding to the IEEE 754 binary
    /// representation `b`, with the sign bit of b and the result in the same
    /// bit position.
    #[inline]
    public func from_bits(b: uint32) float32 {
        return unsafe { @as(*float32, &b).* };
    }

    /// Returns the IEEE 754 binary representation of `self`, with the sign bit
    /// of `self` and the result in the same bit position.
    #[inline]
    public func bits(&self) uint32 {
        return unsafe { @as(*uint32, self).* };
    }

    public func to_string(self) string {
        unsafe {
            let mut cstr: ?[*]uint8 = nil;
            let len = libc.asprintf(&cstr, c"%g", self);
            if len == -1 {
                return empty_string; // fail
            }
            return string.from_raw_with_len(cstr, @as(usize, len));
        }
    }
}

extend float64 : Formattable {
    /// Returns the floating-point number corresponding to the IEEE 754 binary
    /// representation `b`, with the sign bit of b and the result in the same
    /// bit position.
    #[inline]
    public func from_bits(b: uint64) float64 {
        return unsafe { @as(*float64, &b).* };
    }

    /// Returns the IEEE 754 binary representation of `self`, with the sign bit
    /// of `self` and the result in the same bit position.
    #[inline]
    public func bits(&self) uint64 {
        return unsafe { @as(*uint64, self).* };
    }

    public func to_string(self) string {
        unsafe {
            let mut cstr: ?[*]uint8 = nil;
            let len = libc.asprintf(&cstr, c"%g", self);
            if len == -1 {
                return empty_string; // fail
            }
            return string.from_raw_with_len(cstr, @as(usize, len));
        }
    }
}
