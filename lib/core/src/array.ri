// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

import pkg::stdc: string;

#[used]
fn array_index(len: usize, idx: usize) {
    if (idx >= len) {
        panic("array index out of range");
    }
}

#[used]
fn array_eq(arr: *const void, other_arr: *const void, len: usize) bool {
    return unsafe { string::memcmp(arr, other_arr, len) == 0 };
}

#[used]
fn array_ne(arr: *const void, other_arr: *const void, len: usize) bool {
    return !array_eq(arr, other_arr, len);
}

#[used]
fn array_slice(arr: *mut void, elem_size: usize, size: usize, start: usize, end: usize) _slice {
    if (start > end or end > size or start == end) {
        panic("slice index out of range");
    }
    let len = end - start;
    if (len == size) {
        return _slice{
            ptr: arr,
            elem_size: elem_size,
            len: len
        };
    }
    return _slice{
        ptr: unsafe { as(arr, *mut u8) + (start * elem_size) },
        elem_size: elem_size,
        len: len
    };
}
