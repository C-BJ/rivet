// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

using pkg::utils::StaticBuffer;

pub mod demangle {
    pub fn demangle_symbol(name: *u8) String {
        let mut buf = StaticBuffer{};
        let len = unsafe { stdc::strlen(name) };
        let mut res = String::with_capacity(len - 2);

        let mut idx: usize = 2; // skip `_R`
        while (idx < len) {
            let byte = unsafe { name[idx] };
            if (byte.is_digit()) {
                buf.push(byte);
                idx++;
                continue;
            }
            if (!res.is_empty()) {
                res.push_str("::");
            }
            for (_ in 0..as(usize, buf.as_u64())) {
                res.push(unsafe { name[idx++] });
            }
            buf.clear();
            if (!unsafe { name[idx] }.is_digit()) {
                break; // end
            }
        }

        return res;
    }
}
