// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import { Builder } from "std/strings";

const INVALID_ESCAPES: [u8] = r"({`.".as_bytes();
const BACKSLASH: u8 = 92;
const BACKSLASH_R: u8 = 13;
const BACKSLASH_N: u8 = 10;
const DOUBLE_QUOTE: u8 = 34;
const DOUBLE_ESCAPE: string = "\\\\";

pub fn smart_quote(s: string, raw: bool = false) string {
    if s.len == 0 {
        return "";
    } else if s.len < 256 {
        let mut is_pure = true;
        let mut i: usize = 0;
        while i < s.len : i += 1 {
            let ch = s[i];
            if (ch >= 37 and ch <= 90) or (ch >= 95 and ch <= 126)
                or (ch in [b' ', b'!', b'#', b'[', b']']) {
                // safe punctuation + digits + big latin letters, small latin
                // letters + more safe punctuation, important punctuation exceptions,
                // that are not placed conveniently in a consequitive span in the ASCII
                // table.
                continue;
            }
            is_pure = false;
            break;
        }
        if is_pure {
            return s;
        }
    }
    // ensure there is enough space for the potential expansion of several b'\\' or b'\n'
    let mut result = Builder.new(s.len + 10);
    let mut pos: i64 = -1;
    let mut current: u8 = 0;
    let mut next: u8 = 0;
    let mut skip_next = false;
    while {
        pos += 1;
        if skip_next {
            skip_next = false;
            pos += 1;
        }
        if pos >= @as(i64, s.len) {
            break;
        }
        current = s[@as(usize, pos)];
        let pos_1 = @as(usize, pos) + 1;
        if pos_1 < s.len {
            next = s[pos_1];
        } else {
            next = 0;
        }
        switch current {
            DOUBLE_QUOTE => {
                current = 0;
                result.write_byte(BACKSLASH);
                result.write_byte(DOUBLE_QUOTE);
            },
            BACKSLASH => {
                if raw {
                    result.write_string(DOUBLE_ESCAPE);
                    continue;
                }
                if next == BACKSLASH {
                    // escaped backslash - keep as is
                    current = 0;
                    skip_next = true;
                    result.write_string(DOUBLE_ESCAPE);
                    continue;
                } else if next != 0 {
                    if raw {
                        skip_next = true;
                        result.write_string(DOUBLE_ESCAPE);
                        continue;
                    }
                    if next in INVALID_ESCAPES {
                        current = 0;
                        skip_next = true;
                        result.write_byte(next);
                        continue;
                    }
                    // keep all valid escape sequences
                    skip_next = true;
                    result.write_byte(current);
                    result.write_byte(next);
                    current = 0;
                    continue;
                }
            },
            BACKSLASH_N => {
                // keep newlines in string
                current = 0;
                result.write_byte(BACKSLASH);
                result.write_byte(b'n');
            },
            BACKSLASH_R if next == BACKSLASH_N => {
                result.write_byte(current);
                result.write_byte(next);
                current = 0;
                skip_next = true;
            },
            else => result.write_byte(current)
        }
    }
    return result.to_string();
}
