// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "c/libc";

var mut libcore_started: bool = false;

func panic_if(cond: bool, msg: string) {
    if cond {
        console_eprintln("panic: {}", msg);
        bt_print(2);
        process_exit(1);
    }
}

func assert(cond: bool, msg: string) {
    if !cond {
        console_eprintln("panic: assertion failed: {}", msg);
        bt_print(2);
        process_exit(1);
    }
}

#[inline]
func internal_alloc(size: usize) mut_anyptr {
    return mem_alloc(size) catch {
        process_panic(
            "internal error: cannot allocate memory" #if _DEBUG_ " (size: {})", size #endif
        );
    };
}

#[inline]
func internal_zeroed(size: usize) mut_anyptr {
    return mem_zeroed(size) catch {
        process_panic(
            "internal error: cannot allocate zeroed memory" #if _DEBUG_ " (size: {})", size #endif
        );
    };
}

#[inline]
func internal_dup(src: anyptr, sz: usize) mut_anyptr {
    return mem_dup(src, sz) catch {
        process_panic(
            "internal error: cannot duplicate memory" #if _DEBUG_ " (size: {})", sz #endif
        );
    };
}

#[inline]
func internal_resize(ptr: ?mut_anyptr, sz: usize) mut_anyptr {
    return mem_resize(ptr, sz) catch {
        process_panic(
            "internal error: cannot resize memory" #if _DEBUG_ " (size: {})", sz #endif
        );
    };
}

func class_downcast(current_id: usize, expected_id: usize) {
    if current_id != expected_id {
        // TODO: replace indexes with names
        console_eprintln("panic: cannot cast {} to {}", current_id, expected_id);
        bt_print(3);
        process_exit(1);
    }
}

struct EnumInfo {
    _rc: usize;
    _id: usize;
    obj: anyptr;
}

func enum_cast(ptr: anyptr, expected_id: usize) anyptr {
    enum_info := @cast(*EnumInfo, ptr);
    if enum_info._id != expected_id {
        // TODO: replace indexes with names
        console_eprintln("panic: cannot cast {} to {}", enum_info._id, expected_id);
        bt_print(3);
        process_exit(1);
    }
    return enum_info.obj;
}

func trait_cast(got_obj: anyptr, got_id: usize, expected_id: usize) anyptr {
    if got_id != expected_id {
        // TODO: replace indexes with names
        console_eprintln("panic: cannot cast {} to {}", got_id, expected_id);
        bt_print(3);
        process_exit(1);
    }
    return got_obj;
}
