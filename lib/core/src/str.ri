// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

using pkg::traits::ToString;

#[used]
struct _str {
    ptr: *u8;
    pub len: usize;
}

extend str {
    pub unsafe fn from_cstr(cstr: *u8) str {
        let len = unsafe { stdc::strlen(cstr) };
        return _str{
            ptr: unsafe { cstr },
            len: len
        };
    }

    pub unsafe fn from_cstr_with_len(cstr: *u8, len: usize) str {
        return _str{
            ptr: unsafe { cstr },
            len: len
        };
    }

    #[used]
    fn at(&self, idx: usize) u8 {
        if (idx >= self.len) {
            panic("string index out of range (index: {}, len: {})", idx, self.len);
        }
        return unsafe { self.ptr[idx] };
    }

    fn ==(&self, rhs: &Self) bool {
        unsafe {
            if (self.ptr == none) {
                panic("str::_eq_: left side of the operand is `none`");
            } elif (rhs.ptr == none) {
                panic("str::_eq_: right side of the operand is `none`");
            }
            if (self.len != rhs.len) {
                return false;
            }
            if (self.len > 0) {
                let last_idx = self.len - 1;
                if (self.ptr[last_idx] != rhs.ptr[last_idx]) {
                    return false;
                }
            }
            return mem::cmp(self.ptr, rhs.ptr, rhs.len) == 0;
        }
    }

    fn !=(&self, rhs: &Self) bool { return !self.==(rhs); }

    fn <(&self, rhs: &Self) bool {
        unsafe {
            for (i in 0..self.len) {
                if (i >= rhs.len or self.ptr[i] > rhs.ptr[i]) {
                    return false;
                } elif (self.ptr[i] < rhs.ptr[i]) {
                    return true;
                }
            }
            if (self.len < rhs.len) {
                return true;
            }
            return false;
        }
    }

    fn >(&self, rhs: &Self) bool { return !self.<(rhs); }

    fn <=(&self, rhs: &Self) bool { return self.<(rhs) or self.==(rhs); }

    fn >=(&self, rhs: &Self) bool { return self.>(rhs) or self.==(rhs); }

    pub fn fmt(&self, args: ...traits::ToString) String {
        let mut res = String::with_capacity(self.len);
        let mut args_idx: usize = 0;
        let mut i: usize = 0;
        while (i < self.len) {
            let b = unsafe { self.ptr[i] };
            let b2 = if (i + 1 < self.len) unsafe { self.ptr[i + 1] } else 0;
            if (b == b'{' and b2 == b'}') {
                res.push_string(args[args_idx++].to_string());
                i++;
            } else {
                res.push(b);
            }
            i++;
        }
        return res;
    }

    pub fn is_empty(&self) bool { return self.len == 0; }

    /// Returns the number of runes contained in `self`.
    pub fn runes_count(&self) usize {
        return cstr_runes_count(unsafe { self.ptr }, self.len);
    }

    pub fn as_bytes(&self) [u8] {
        return unsafe { _slice::from_array(as(*mut u8, self.ptr), sizeof!(u8), self.len) };
    }

    #[used]
    fn slice(&self, start: usize, end: usize) str {
        unsafe {
            if (start > end or start > self.len or end > self.len) {
                panic(
                    "string slice index out of range (range: {}..{}, len: {})", start,
                    end, self.len
                );
            }
            let len = end - start;
            if (len == self.len) {
                return self.*;
            }
            return _str{
                ptr: self.ptr + start,
                len: len
            };
        }
    }

    #[used]
    fn slice_from(&self, start: usize) str {
        return self.slice(start, self.len);
    }
}

extend str for ToString {
    fn to_string(&self) String { return String::from_str(self.*); }
}
