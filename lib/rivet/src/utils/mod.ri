// Copyright (C) 2022 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import "std/fs";
import "std/traits";
import "std/console";
import "std/process";
import "std/console/styles";

public var VERSION = "0.1.0b";

#[inline]
public func is_name_char(ch: uint8) bool {
    return ch.is_letter() or ch == b'_';
}

#[inline]
public func is_new_line(ch: uint8) bool {
    return ch == 10 or ch == 13;
}

public func skip_bom(file_content: string) string {
   // BOM check
   if file_content.len >= 3 {
      unsafe {
         if file_content[0] == 0xEF and file_content[1] == 0xBB and file_content[2] == 0xBF {
            // skip three BOM bytes
            return file_content[3..];
         }
      }
   }
   return file_content;
}

struct CachedFile {
   path: string;
   content: string;
   mut lines: []string;
}

#[boxed]
struct SourceCache {
   mut sources: []CachedFile;

   public func find(self, path: string) ?string {
      for source in self.sources {
         if source.path == path {
            return source.content;
         }
      }
      return nil;
   }

   public func find_line(self, path: string, line: usize) ?string {
      return if lines := self.find_lines(path) {
         lines[line]
      } else {
        nil
      };
   }

   public func find_lines(self, path: string) ?[]string {
      mut i: usize := 0;
      while i < self.sources.len : i += 1 {
         cached := self.sources[i];
         if cached.path == path {
            if cached.lines.is_empty() {
               cached.lines = cached.content.split_into_lines();
            }
            return cached.lines;
         }
      }
      return nil;
   }
}

public var mut source_cache: SourceCache = SourceCache();

public func read_file(path: string) !string {
   if res := source_cache.find(path) {
      return res;
   }
   content := skip_bom(fs.read_file(path).!);
   unsafe {
      source_cache.sources.push(CachedFile(path, content));
   }
   return content;
}

#[inline]
public func min(a: usize, b: usize) usize {
   return if a < b { a } else { b };
}

#[inline]
public func max(a: usize, b: usize) usize {
   return if a > b { a } else { b };
}

public func option(args: []string, param: string) ?string {
    for i, arg in args {
        if param == arg {
            if i + 1 < args.len {
                return args[i + 1];
            }
            break;
        }
    }
    return nil;
}

public func error(msg: string, args: ...traits.Stringable) never {
   console.eprintln(
      "{} {} {}", styles.bold("rivet:"),
      styles.bold(styles.red("error:")), msg.fmt(args)
   );
   process.exit(1);
}

var StderrSupportStyles: bool = styles.stderr_support_styles();

#[inline]
public func bold(msg: string) string {
    return if StderrSupportStyles { styles.bold(msg) } else { msg };
}

#[inline]
public func red(msg: string) string {
    return if StderrSupportStyles { styles.red(msg) } else { msg };
}

#[inline]
public func yellow(msg: string) string {
    return if StderrSupportStyles { styles.yellow(msg) } else { msg };
}

#[inline]
public func cyan(msg: string) string {
    return if StderrSupportStyles { styles.cyan(msg) } else { msg };
}

#[inline]
public func blue(msg: string) string {
    return if StderrSupportStyles { styles.blue(msg) } else { msg };
}

#[inline]
public func green(msg: string) string {
    return if StderrSupportStyles { styles.green(msg) } else { msg };
}
